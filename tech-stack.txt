Guía Técnica de la Aplicación
=================================

Este documento describe la arquitectura y el funcionamiento del "Extractor de Acordes y Visualizador". La aplicación ha sido refactorizada hacia una arquitectura modular para mejorar su mantenibilidad, escalabilidad y claridad.

---
### 1. Arquitectura General: Orquestación y Módulos

La aplicación sigue el patrón de diseño de un "orquestador" central con módulos especializados. La lógica ya no está en una clase monolítica, sino distribuida en componentes con responsabilidades claras.

- **`index.tsx` (La clase `PianoApp`)**: Actúa como el orquestador principal. Sus responsabilidades son:
    - **Inicialización:** Crea instancias de todos los módulos (`Visualizer`, `Composer`, `Extractor`, `AudioEngine`).
    - **Gestión de la Interfaz Principal:** Controla el cambio entre las pestañas principales (Visualizador, Compositor, Extractor).
    - **Mediación de Comunicación:** Facilita la comunicación entre módulos. Por ejemplo, pasa la canción del `Extractor` al `Composer` y maneja la visualización del `Chord Inspector`, que es un componente compartido por varios módulos.

---
### 2. Estructura de Módulos

El código fuente está organizado en una estructura de directorios que separa las responsabilidades de manera lógica.

- **`/src/core` - Módulos Centrales Reutilizables:**
    - `audio.ts`: La clase `AudioEngine` encapsula toda la lógica de audio usando la librería **Tone.js**.
    - `chord-utils.ts`: Contiene funciones puras para la lógica musical: análisis de texto de canciones, transposición de acordes, cálculo de las notas de un acorde, etc.
    - `piano-renderer.ts`: Exporta una función pura `createPiano` que se encarga exclusivamente de generar el DOM para los pianos virtuales.

- **`/src/modes` - Módulos de Funcionalidad Específica:**
    - `visualizer.ts`: La clase `Visualizer` gestiona todo el estado y la interacción de la pestaña "Visualizador".
    - `composer.ts`: La clase `Composer` maneja la lógica de la pestaña "Compositor", incluyendo la secuencia de acordes, la funcionalidad de arrastrar y soltar, y la renderización de la composición.
    - `extractor.ts`: La clase `Extractor` encapsula la lógica de la pestaña "Extractor", como el análisis del texto, la transposición y la comunicación con el compositor.

- **`/src` - Archivos de Soporte:**
    - `types.ts`: Centraliza todas las definiciones de tipos de TypeScript (`SequenceItem`, `SongLine`, etc.) para garantizar la consistencia en toda la aplicación.
    - `constants.ts`: Centraliza las constantes musicales (`NOTE_TO_INDEX`, `MUSICAL_INTERVALS`, etc.), desacoplando los datos de la lógica.

---
### 3. Estructuras de Datos Musicales

La lógica musical se basa en un conjunto de estructuras de datos ahora centralizadas en `src/constants.ts`:

- **`NOTE_TO_INDEX`**: Un diccionario que mapea todas las notaciones de notas (ej. "C#", "Db") a un índice numérico único (0-11).
- **`MUSICAL_INTERVALS`**: Define cada tipo de acorde como un array de intervalos en semitonos.
- **`SequenceItem`**: La representación de un acorde: `{ rootNote: string, type: string, bassNote?: string }`.

---
### 4. Funcionalidades Clave y su Ubicación

- **Extractor Local y Transposición (`extractor.ts`):**
    - El análisis de texto se realiza con la función `parseSongText` de `chord-utils.ts`.
    - La transposición es no destructiva, aplicando un offset sobre la canción original guardada. La lógica de transposición está en `applyTransposition` dentro de `chord-utils.ts`.

- **Compositor Interactivo (`composer.ts`):**
    - Gestiona un array `sequence` que representa la progresión de acordes.
    - La funcionalidad de arrastrar y soltar manipula directamente el orden del array `sequence` y provoca un re-renderizado.

- **Visualización y Sonido (`piano-renderer.ts` y `audio.ts`):**
    - El renderizado de pianos se realiza mediante la función `createPiano`, que es llamada por los módulos `Visualizer` y `PianoApp` (para el inspector).
    - La clase `AudioEngine` gestiona la reproducción de audio, iniciándose con la primera interacción del usuario para cumplir con las políticas de los navegadores.

---
### 5. Sistema de Audio: Tone.js

Para mejorar drásticamente la calidad, fiabilidad y robustez del sonido, la aplicación utiliza **Tone.js**, una de las librerías más potentes para la creación de música en el navegador.

- **Librería:** `Tone.js` proporciona un framework completo para la Web Audio API.
- **Sonido de Piano de Alta Calidad:** Se utiliza un `Tone.Sampler` que reproduce muestras reales de un piano de cola (Salamander Grand Piano). Esto ofrece un sonido mucho más realista y expresivo que el sintetizador anterior.
- **Implementación:** Toda la lógica de carga de las muestras de audio y la reproducción de notas está encapsulada en la clase `AudioEngine` (`src/core/audio.ts`). El motor se inicializa de forma robusta en la primera interacción del usuario, evitando errores de carga y garantizando que el audio siempre esté listo para reproducirse.

---
### 6. Guía para Futuras Mejoras

La nueva arquitectura facilita la extensión de la aplicación:

- **Añadir Nuevos Acordes:** Simplemente añade una nueva entrada a `MUSICAL_INTERVALS` y `CHORD_TYPE_MAP` en `src/constants.ts`. La lógica de la aplicación lo integrará automáticamente.
- **Cambiar de Instrumento:** Modifica la clase `AudioEngine` en `src/core/audio.ts` para cargar un `Sampler` con un set de muestras diferente (ej. guitarra, cuerdas).
- **Exportar/Importar Secuencias:** Añade nuevos métodos a la clase `Composer` en `src/modes/composer.ts` y conecta sus botones a la interfaz. La lógica de la secuencia ya está encapsulada en ese módulo.

---
### 7. Mejoras Recientes y Refinamientos de Lógica

Se han implementado varias mejoras clave para aumentar la robustez, la calidad de audio y la precisión visual de la aplicación.

- **Análisis de Acordes Avanzado (`chord-utils.ts`):**
    - La función `parseSongText` ahora es capaz de interpretar acordes agrupados entre paréntesis, como `(G-A)`. En lugar de tratarlos como anotaciones, el sistema los expande a una secuencia de acordes individuales (`G A`), permitiendo que sean interactivos y se integren correctamente en la composición.

- **Mejora del Sonido del Bajo (`chord-utils.ts`):**
    - En la función `getChordNotes`, se ha modificado el cálculo de la nota del bajo para que se genere una octava más grave. Este cambio proporciona un sonido de acorde más profundo y con mayor cuerpo, mejorando significativamente la calidad de la experiencia auditiva.

- **Renderizado Visual Robusto (`piano-renderer.ts`, `index.html` y `index.css`):**
    - **Hoja de Canciones Consistente:** Se ha refactorizado el CSS (`.song-sheet-container`) para usar un sistema de `padding` en lugar de posicionamiento relativo frágil. Esto garantiza que el espaciado entre las líneas de acordes y la letra sea siempre correcto y consistente, tanto en el "Extractor" como en el "Compositor".
    - **Rango de Piano Dinámico:** La función `createPiano` ahora ajusta dinámicamente su rango de renderizado. Si un acorde incluye una nota de bajo muy grave, el piano se expande automáticamente hacia la izquierda para asegurar que todas las notas, sin importar su octava, sean visibles.
    - **Alineación de Componentes:** Se corrigieron errores de alineación, especialmente el centrado del piano principal. La la función `createPiano` ahora construye el piano en un nuevo `div` y luego lo inserta dentro del `#piano-container`, permitiendo que las reglas de centrado de CSS (Flexbox) funcionen sin conflictos.